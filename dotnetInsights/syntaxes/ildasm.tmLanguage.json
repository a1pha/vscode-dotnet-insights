{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ildasm",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#stringsSingleQuote"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.ildasm",
				"match": "\\b(if|while|for|return|def|this|cluster|is|not|and|or|auto|ansi|beforefieldinit|add|add.ovf|add.ovf.un|and|arglist|beq|beq.s|bge|bge.s|bge.un|bge.un.s|bgt|bgt.s|bgt.un|bgt.un.s|ble|ble.s|ble.un|ble.un.s|blt|blt.s|blt.un|blt.un.s|bne.un|bne.un.s|box|br|br.s|break|brfalse|brfalse.s|brinst|brinst.s|brnull|brnull.s|brtrue|brtrue.s|brzero|brzero.s|call|calli|callvirt|castclass|ceq|cgt|cgt.un|ckfinite|clt|clt.un|constrained.|conv.i|conv.i1|conv.i2|conv.i4|conv.i8|conv.ovf.i|conv.ovf.i.un|conv.ovf.i1|conv.ovf.i1.un|conv.ovf.i2|conv.ovf.i2.un|conv.ovf.i4|conv.ovf.i4.un|conv.ovf.i8|conv.ovf.i8.un|conv.ovf.u|conv.ovf.u.un|conv.ovf.u1|conv.ovf.u1.un|conv.ovf.u2|conv.ovf.u2.un|conv.ovf.u4|conv.ovf.u4.un|conv.ovf.u8|conv.ovf.u8.un|conv.r.un|conv.r4|conv.r8|conv.u|conv.u1|conv.u2|conv.u4|conv.u8|cpblk|cpobj|div|div.un|dup|endfault|endfilter|endfinally|initblk|initobj|isinst|jmp|ldarg|ldarg.0|ldarg.1|ldarg.2|ldarg.3|ldarg.s|ldarga|ldarga.s|ldc.i4|ldc.i4.0|ldc.i4.1|ldc.i4.2|ldc.i4.3|ldc.i4.4|ldc.i4.5|ldc.i4.6|ldc.i4.7|ldc.i4.8|ldc.i4.m1|ldc.i4.M1|ldc.i4.s|ldc.i8|ldc.r4|ldc.r8|ldelem|ldelem.i|ldelem.i1|ldelem.i2|ldelem.i4|ldelem.i8|ldelem.r4|ldelem.r8|ldelem.ref|ldelem.u1|ldelem.u2|ldelem.u4|ldelem.u8|ldelema|ldfld|ldflda|ldftn|ldind.i|ldind.i1|ldind.i2|ldind.i4|ldind.i8|ldind.r4|ldind.r8|ldind.ref|ldind.u1|ldind.u2|ldind.u4|ldind.u8|ldlen|ldloc|ldloc.0|ldloc.1|ldloc.2|ldloc.3|ldloc.s|ldloca|ldloca.s|ldnull|ldobj|ldsfld|ldsflda|ldstr|ldtoken|ldvirtftn|leave|leave.s|localloc|mkrefany|mul|mul.ovf|mul.ovf.un|neg|newarr|newobj|no|typecheck|rangecheck|nullcheck|The specified fault check(s) normally performed as part of the execution of the subsequent instruction can/shall be skipped.|nop|not|or|pop|readonly.|refanytype|refanyval|rem|rem.un|ret|rethrow|shl|shr|shr.un|sizeof|starg|starg.s|stelem|stelem.i|stelem.i1|stelem.i2|stelem.i4|stelem.i8|stelem.r4|stelem.r8|stelem.ref|stfld|stind.i|stind.i1|stind.i2|stind.i4|stind.i8|stind.r4|stind.r8|stind.ref|stloc|stloc.0|stloc.1|stloc.2|stloc.3|stloc.s|stobj|stsfld|sub|sub.ovf|sub.ovf.un|switch|tail.|throw|unaligned. (alignment)|unbox|unbox.any|volatile|xor)\\b"
			}]
		},
		"expression": {
			"comment": "All valid ildasm expressions",
			"patterns": [
				{
					"include": "#expression-base"
				}
			]
		},
		"expression-base": {
			"comment": "valid ildasm expressions with comments and line continuation",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#list"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#member-access"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.ildasm",
					"begin": "(\\//)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.ildasm"
						}
					},
					"end": "($)"
				}
			]
		},
		"builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.ildasm",
					"match": "(?x)\n  (?<!\\.) \\b(\n    include | print | Directory | File |instance|void|private|extends|public|hidebysig|static|hidebysig|.class|beforefieldinit|typeof|print\n  )\\b\n"
				}
			]
		},
		"builtin-types": {
			"name": "support.type.ildasm",
			"match": "(?x)\n  (?<!\\.) \\b(\n    bool|double|float|int|long|int32|int64|string|object\n )\\b\n"
		},
		"list": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.list.begin.ildasm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.list.end.ildasm"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator.element.ildasm",
					"match": ","
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"name": "constant.language.ildasm",
					"match": "\\b(true|false|null|nyi)\\b"
				},
				{
					"include": "#number"
				}
			]
		},
		"number": {
			"name": "constant.numeric.ildasm",
			"patterns": [
				{
					"include": "#number-float"
				},
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-oct"
				},
				{
					"include": "#number-long"
				},
				{
					"include": "#number-il"
				},
				{
					"name": "invalid.illegal.name.ildasm",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"number-float": {
			"name": "constant.numeric.float.ildasm",
			"match": "(?x)\n  (?<! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.ildasm"
				}
			}
		},
		"number-dec": {
			"name": "constant.numeric.dec.ildasm",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.ildasm"
				},
				"2": {
					"name": "invalid.illegal.dec.ildasm"
				},
				"3": {
					"name": "invalid.illegal.dec.ildasm"
				}
			}
		},
		"number-il": {
			"name": "constant.numeric.dec.ildasm",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |IL_[0-9](?: _?[0-9A-Fa-f] )*|\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.ilnumber.ildasm"
				},
				"2": {
					"name": "invalid.illegal.decil.ildasm"
				},
				"3": {
					"name": "invalid.illegal.decil.ildasm"
				}
			}
		},
		"number-hex": {
			"name": "constant.numeric.hex.ildasm",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.ildasm"
				}
			}
		},
		"number-oct": {
			"name": "constant.numeric.oct.ildasm",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.ildasm"
				}
			}
		},
		"number-long": {
			"name": "constant.numeric.bin.ildasm",
			"comment": "this is to support ildasm2 syntax for long ints",
			"match": "(?x)\n  (?<![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n",
			"captures": {
				"2": {
					"name": "storage.type.number.ildasm"
				}
			}
		},
		"strings": {
			"name": "string.quoted.double.ildasm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ildasm",
					"match": "\\\\."
				}
			]
		},
		"stringsSingleQuote": {
			"name": "string.quoted.single.ildasm",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.ildasm",
					"match": "\\\\."
				}
			]
		},
		"function-call": {
			"name": "meta.function-call.ildasm",
			"begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.ildasm"
				}
			},
			"patterns": [
				{
					"include": "#special-variables"
				},
				{
					"include": "#function-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"member-access": {
			"name": "meta.member.access.ildasm",
			"begin": "(\\.)\\s*(?!\\.)",
			"end": "(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?<=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?<=\\s))(?=[^\\\\\\w\\s]) |\n  $\n",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.ildasm"
				}
			},
			"patterns": [
				{
					"include": "#function-call"
				},
				{
					"include": "#member-access-base"
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"include": "#builtin-possible-callables"
				},
				{
					"comment": "Some color schemas support meta.function-call.generic scope",
					"name": "meta.function-call.generic.ildasm",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"function-arguments": {
			"begin": "(\\()",
			"end": "(?=\\))(?!\\)\\s*\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.ildasm"
				}
			},
			"contentName": "meta.function-call.arguments.ildasm",
			"patterns": [
				{
					"name": "punctuation.separator.arguments.ildasm",
					"match": "(,)"
				},
				{
					"match": "(?x)\n  (?:(?<=[,(])|^) \\s* (\\*{1,2})\n",
					"captures": {
						"1": {
							"name": "keyword.operator.unpacking.arguments.ildasm"
						}
					}
				},
				{
					"include": "#lambda-incomplete"
				},
				{
					"include": "#illegal-names"
				},
				{
					"match": "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)",
					"captures": {
						"1": {
							"name": "variable.parameter.function-call.ildasm"
						},
						"2": {
							"name": "keyword.operator.assignment.ildasm"
						}
					}
				},
				{
					"name": "keyword.operator.assignment.ildasm",
					"match": "=(?!=)"
				},
				{
					"include": "#expression"
				},
				{
					"match": "\\s*(\\))\\s*(\\()",
					"captures": {
						"1": {
							"name": "punctuation.definition.arguments.end.ildasm"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.ildasm"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.ildasm"
}