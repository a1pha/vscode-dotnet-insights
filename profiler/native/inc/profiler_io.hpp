////////////////////////////////////////////////////////////////////////////////
// Module: profiler_io.hpp
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __PROFILER_IO_HPP__
#define __PROFILER_IO_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <codecvt>
#include <exception>
#include <locale>
#include <vector>

#include "http_request.hpp"
#include "http_response.hpp"
#include "tcp_connection.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev31 {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class profiler_io
{
    // Ctor / Dtor
    public:
        profiler_io();
        ~profiler_io();

    // Member Methods
    public:
        void communicate(const std::size_t, const std::wstring&, double);

    // Private member methods
    private:
        void _attempt_open_connection();
        void _close_connection();
        bool _is_open_connection() const;

    // Private member methods
    private:
        const std::vector<wchar_t> _get_json_payload(const std::size_t, const std::wstring&, double);
        const ev31::http_request<std::string, std::string::const_iterator> _get_http_request(const std::vector<wchar_t>&);

        bool should_open_connection;

        std::string ip;
        std::string port;
        ev31::tcp_connection* connection;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace (ev31)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __PROFILER_IO_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////